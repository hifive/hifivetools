LF
	/**
	 * <H3>メッセージを表すクラス.</H3>
	 * 
	 * @author MessageGenerator
	 */
	public static final class Message {
LF
		/**
		 * バンドル名.
		 */
		private static final String BUNDLE_NAME = "$$bundle_file_name$$"; //$NON-NLS-1$
LF
		/**
		 * リソースバンドル.
		 */
		private static final ResourceBundle RESOURCE_BUNDLE = ResourceBundle.getBundle(BUNDLE_NAME);
LF
		/**
		 * メッセージキー.
		 */
		private final String key;
LF
		/**
		 * ログレベル.
		 */
		private final LogLevel level;
LF
		/**
		 * メッセージ内容.
		 */
		private final String text;
LF
		/**
		 * コンストラクタ.
		 * 
		 * @param key メッセージkey
		 */
		private Message(String key) {
LF
			this.key = key;
			String str = RESOURCE_BUNDLE.getString(key);
			String[] strArray = StringUtils.split(str, String.valueOf(','), 2);
			if (strArray != null && strArray.length == 2) {
				this.level = LogLevel.valueOf(strArray[0]);
				this.text = strArray[1];
			} else {
				throw new GeneratorRuntimeException("error occurred during loading " + key + "[" + str + "]");
			}
		}
LF
		/**
		 * メッセージキーを取得する.
		 * 
		 * @return メッセージキー
		 */
		public String getKey() {
LF
			return key;
		}
LF
		/**
		 * ログレベルを返す.
		 * 
		 * @return ログレベル.
		 */
		public LogLevel getLevel() {
LF
			return level;
		}
LF
		/**
		 * フォーマットされていないメッセージを返す.
		 * 
		 * @return フォーマットされていないメッセージ.
		 */
		public String getText() {
LF
			return text;
		}
LF
		/**
		 * フォーマットされたメッセージを返す.
		 * 
		 * @param params パラメータ.
		 * @return フォーマットされたメッセージ.
		 */
		public String format(Object... params) {
LF
			return MessageFormat.format(text, params);
		}
	}